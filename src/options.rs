use clap::{Parser, ValueEnum};
use std::{path::PathBuf, fmt::{Display, self}};

#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, ValueEnum)]
pub enum Color {
    Never, Auto, Always
}

// To use the `{}` marker, the trait `fmt::Display` must be implemented
// manually for the type.
impl Display for Color {
    // This trait requires `fmt` with this exact signature.
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let repr = match self {
            Color::Never => "never",
            Color::Auto => "auto",
            Color::Always => "always",
        };
        // Write strictly the first element into the supplied output
        // stream: `f`. Returns `fmt::Result` which indicates whether the
        // operation succeeded or failed. Note that `write!` uses syntax which
        // is very similar to `println!`.
        write!(f, "{}", repr)
    }
}

/// Program to generate reports based on timesheets generated by timesheet-generator.
#[derive(Parser, Debug)]
#[command(author, version, about, long_about = None)]
pub struct Options {
    /// path to file to read
    pub filename: Option<PathBuf>,
    #[arg(long, default_value_t = Color::Auto)]
    pub color: Color
}
